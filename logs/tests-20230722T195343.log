csv.dir.base: /var/lib/neo4j/import/csv
cypher.dir.base: /home/nhtri/javaprojs/synthea-graph/neo4j-graph-loader/src/main/resources/cypher
csv.batchsize: 1500
csv.loading.onerror: TERMINATE_PROGRAM
csv.preload.file: /home/nhtri/javaprojs/synthea-graph/neo4j-graph-loader/src/main/resources/cypher/preload.cql
Cleaning graph
Executing cypher:
--------------------------------------------------
MATCH (n) CALL {WITH n DETACH DELETE n} IN TRANSACTIONS OF 1000 ROWS
--------------------------------------------------
Nodes deleted: 180559
Relationships deleted: 621454
==================================================
Execute preload cypher before ingesting
==================================================
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT patient_id IF NOT EXISTS FOR (n:Patient) REQUIRE n.id IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT zipcode_id IF NOT EXISTS FOR (n:ZipCode) REQUIRE n.zip IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT race_id IF NOT EXISTS FOR (n:Race) REQUIRE n.type IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT eth_id IF NOT EXISTS FOR (n:Ethnicity) REQUIRE n.type IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE INDEX encounter_id IF NOT EXISTS FOR (n:Encounter) ON n.id
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT snomed_id IF NOT EXISTS FOR (n:SNOMED_CT) REQUIRE n.code IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT provider_id IF NOT EXISTS FOR (n:Provider) REQUIRE n.id IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT organization_id IF NOT EXISTS FOR (n:Organization) REQUIRE n.id IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 1 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
Executing cypher:
--------------------------------------------------
CREATE CONSTRAINT specialty_id IF NOT EXISTS FOR (n:Specialty) REQUIRE n.name IS UNIQUE
--------------------------------------------------
Preload cypher result:
--------------------------------------------------
Has error: false
Executing time: 0 ms
Constraints added: 0
Constraints removed: 0
Indexes added: 0
Indexes removed: 0
--------------------------------------------------
==================================================
Execute ingest cypher: 00-patients.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/patients.csv' AS row
CALL {
WITH row
MERGE(p:Patient {id: row.Id})
SET
p.marital = row.MARITAL,
p.ssn = row.SSN,
p.firstName = row.FIRST,
p.lastName = row.LAST,
p.suffix = row.SUFFIX,
p.prefix = row.PREFIX,
p.city = row.CITY,
p.county = row.COUNTY,
p.location = point({latitude:toFloat(row.LAT),
                    longitude:toFloat(row.LON)}),
p.drivers=row.DRIVERS,
p.birthDate=date(row.BIRTHDATE)
WITH row,p
MERGE (r:Race {type: row.RACE})
MERGE (p)-[:HAS_RACE]->(r)
WITH row,p
MERGE (e:Ethnicity {type: row.ETHNICITY})
MERGE (p)-[:HAS_ETHNICITY]->(e)
WITH row,p
  WHERE row.ZIP IS NOT NULL
MERGE (z:ZipCode {zip: row.ZIP})
MERGE (p)-[:HAS_ZIPCODE]->(z)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 70 ms
Nodes created: 1416
Nodes deleted: 0
Relationships created: 3000
Relationships deleted: 0
Properties set: 14330
Labels added: 1416
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 01-encounters.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/encounters.csv' AS row
CALL {
  WITH row
  MERGE(e:Encounter {id: row.Id})
  SET
  e.date=datetime(row.START),
  e.description=row.DESCRIPTION,
  e.isEnd = false
  FOREACH (ignore in CASE WHEN row.STOP IS NOT NULL AND row.STOP <> '' THEN [1] ELSE [] END |
    SET e.end=datetime(row.STOP)
  )
  FOREACH (ignore in CASE WHEN row.CODE IS NOT NULL AND row.CODE <> '' THEN [1] ELSE [] END |
    MERGE(s:SNOMED_CT {code:row.CODE})
    MERGE(e)-[:OF_TYPE]->(s)
  )
  WITH row,e
  CALL apoc.create.setLabels( e, [ 'Encounter', row.ENCOUNTERCLASS ] ) YIELD node
  WITH row,e
  MERGE(p:Patient {id: row.PATIENT})
  MERGE (p)-[:HAS_ENCOUNTER]->(e)
  WITH row,e
  MERGE (provider:Provider {id:row.PROVIDER})
  MERGE(e)-[:HAS_PROVIDER]->(provider)
  FOREACH (ignore in CASE WHEN row.ORGANIZATION IS NOT
  NULL AND row.ORGANIZATION <> '' THEN [1] ELSE [] END |
    MERGE (o:Organization {id: row.ORGANIZATION})
    MERGE (e)-[:HAS_ORGANIZATION]->(o))
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 107 ms
Nodes created: 63202
Nodes deleted: 0
Relationships created: 242408
Relationships deleted: 0
Properties set: 305610
Labels added: 63202
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 02-providers.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/providers.csv' AS row
CALL {
WITH row
MERGE (p:Provider {id: row.Id})
SET p.name=row.NAME,
p.gender=row.GENDER,
p.address = row.ADDRESS,
p.state = row.STATE,
p.location = point({latitude:toFloat(row.LAT),
                    longitude:toFloat(row.LON)})
WITH row,p
MERGE (o:Organization {id: row.ORGANIZATION})
MERGE(p)-[:BELONGS_TO]->(o)
WITH row,p
MERGE (s:Specialty {name: row.SPECIALITY})
MERGE (p)-[:HAS_SPECIALTY]->(s)
WITH row,p
  WHERE row.ZIP IS NOT NULL
MERGE (z:ZipCode {zip: row.ZIP})
MERGE (p)-[:HAS_ZIPCODE]->(z)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 66 ms
Nodes created: 2803
Nodes deleted: 0
Relationships created: 10837
Relationships deleted: 0
Properties set: 28278
Labels added: 2803
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 03-organizations.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/organizations.csv' AS row
CALL {
WITH row
  MERGE (o:Organization {id: row.Id})
  SET o.name=row.NAME,
  o.address = row.ADDRESS,
  o.state = row.STATE,
  o.location = point({latitude:toFloat(row.LAT),
                      longitude:toFloat(row.LON)})
  WITH row,o
    WHERE row.ZIP IS NOT NULL
  MERGE (z:ZipCode {zip: row.ZIP})
  MERGE (o)-[:HAS_ZIPCODE]->(z)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 42 ms
Nodes created: 0
Nodes deleted: 0
Relationships created: 1396
Relationships deleted: 0
Properties set: 5584
Labels added: 0
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 04-medications.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/medications.csv' AS row
CALL {
  WITH row
  MERGE (p:Patient {id:row.PATIENT})
  MERGE (d:Drug {code:row.CODE})
  SET d.description=row.DESCRIPTION
  MERGE (ps:Encounter {id:row.ENCOUNTER, isEnd: false})
  MERGE (ps)-[:HAS_DRUG]->(d)
  MERGE (p)-[:HAS_ENCOUNTER]->(ps)
  FOREACH( ignore in CASE WHEN row.REASONCODE IS NOT NULL AND
  row.REASONCODE <> '' THEN [1] ELSE [] END |
    MERGE(s:SNOMED_CT {code:row.CODE})
    SET s:Diagnosis, s.description = row.REASONDESCRIPTION
    MERGE (ps)-[:HAS_DIAGNOSIS]->(s)
  )
  WITH row,ps,p
    WHERE row.STOP IS NOT NULL and row.STOP <> ''
  CREATE (pe:Encounter {id:row.ENCOUNTER, date:datetime(row.
    STOP)})
  SET pe.isEnd=true
  CREATE (p)-[:HAS_ENCOUNTER]->(pe)
  CREATE (pe)-[:HAS_DRUG]->(d)
  CREATE (ps)-[:HAS_END]->(pe)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 90 ms
Nodes created: 112922
Nodes deleted: 0
Relationships created: 271807
Relationships deleted: 0
Properties set: 272558
Labels added: 56663
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 05-conditions.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/conditions.csv' AS row
CALL {
WITH row
MATCH (p:Patient {id:row.PATIENT})
MERGE (c:SNOMED_CT {code:row.CODE})
SET c.description=row.DESCRIPTION, c:Condition
MERGE (cs:Encounter {id:row.ENCOUNTER, isEnd: false})
  ON CREATE
  SET cs.date=datetime(row.START)
MERGE (p)-[:HAS_ENCOUNTER]->(cs)
MERGE (cs)-[:HAS_CONDITION]->(c)
WITH p,c,cs,row
  WHERE row.STOP IS NOT NULL and row.STOP <> ''
MERGE (ce:Encounter {id:row.ENCOUNTER,
                     date:datetime(row.STOP)})
SET ce.isEnd=true
MERGE (p)-[:HAS_ENCOUNTER]->(ce)
MERGE (ce)-[:HAS_CONDITION]->(c)
MERGE (cs)-[:HAS_END]->(ce)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 78 ms
Nodes created: 27360
Nodes deleted: 0
Relationships created: 124630
Relationships deleted: 0
Properties set: 124840
Labels added: 27573
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 06-procedures.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/procedures.csv' AS row
CALL {
  WITH row
  MATCH (p:Patient {id:row.PATIENT})
  MERGE (c:SNOMED_CT {code:row.CODE})
  SET c.description=row.DESCRIPTION, c:Procedure
  MERGE (cs:Encounter {id:row.ENCOUNTER, isEnd: false})
    ON CREATE
    SET cs.date=datetime(row.START)
  MERGE (p)-[:HAS_ENCOUNTER]->(cs)
  MERGE (cs)-[:HAS_PROCEDURE]->(c)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 44 ms
Nodes created: 216
Nodes deleted: 0
Relationships created: 92006
Relationships deleted: 0
Properties set: 115919
Labels added: 433
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 07-allergies.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/allergies.csv' AS row
CALL {
WITH row
MATCH (p:Patient {id:row.PATIENT})
MERGE (c:SNOMED_CT {code:row.CODE})
SET c.description=row.DESCRIPTION, c:Allergy
MERGE (cs:Encounter {id:row.ENCOUNTER, isEnd: false})
  ON CREATE
  SET cs.date=datetime(row.START)
MERGE (p)-[:HAS_ENCOUNTER]->(cs)
MERGE (cs)-[:ALLERGY_STARTED]->(c)
WITH p,c,cs,row
  WHERE row.STOP IS NOT NULL and row.STOP <> ''
MERGE (ce:Encounter {id:row.ENCOUNTER,
                     date:datetime(row.STOP)})
SET ce.isEnd=true
MERGE (p)-[:HAS_ENCOUNTER]->(ce)
MERGE (ce)-[:ALLERGY_ENDED]->(c)
MERGE (cs)-[:HAS_END]->(ce)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 72 ms
Nodes created: 21
Nodes deleted: 0
Relationships created: 718
Relationships deleted: 0
Properties set: 739
Labels added: 42
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
==================================================
Execute ingest cypher: 08-careplans.cql
==================================================
Executing cypher:
--------------------------------------------------
LOAD CSV WITH HEADERS FROM 'file:///var/lib/neo4j/import/csv/careplans.csv' AS row
CALL {
  WITH row
  MATCH (p:Patient {id:row.PATIENT})
  MERGE (cp:CarePlan {code:row.Id})
  MERGE (c:SNOMED_CT {code:row.CODE})
    SET c.description=row.DESCRIPTION, c:Care
  MERGE (cp)-[:HAS_CARE_TYPE]->(c)
  MERGE (cs:Encounter {id:row.ENCOUNTER, isEnd: false})
    ON CREATE
    SET cs.date=datetime(row.START)
  MERGE (cs)-[:HAS_CARE_TYPE]->(c)
  MERGE (p)-[:HAS_ENCOUNTER]->(cs)
  MERGE (cs)-[:CARE_PLAN_START]->(cp)
  WITH p,cp,cs,row
    WHERE row.STOP IS NOT NULL and row.STOP <> ''
  CREATE (ce:Encounter {id:row.ENCOUNTER, date:datetime(row.STOP)})
    SET ce.code=row.CODE, ce.isEnd=true
  MERGE (p)-[:HAS_ENCOUNTER]->(ce)
  MERGE (ce)-[:CARE_PLAN_END]->(cp)
  MERGE (cs)-[:HAS_END]->(ce)
}
IN TRANSACTIONS OF 1500 ROWS
ON ERROR BREAK
REPORT STATUS AS s
RETURN linenumber() AS linenumner, s.committed AS committed, s.errorMessage AS errorMessage, s.started AS started, s.transactionId AS transactionId
--------------------------------------------------
Ingest cypher result:
--------------------------------------------------
Has error: false
Executing time: 88 ms
Nodes created: 6303
Nodes deleted: 0
Relationships created: 18721
Relationships deleted: 0
Properties set: 17060
Labels added: 6339
Labels removed: 0
Indexes added: 0
Indexes removed: 0
Constraints added: 0
Constraints removed: 0
--------------------------------------------------
Error messages:
--------------------------------------------------
--------------------------------------------------
